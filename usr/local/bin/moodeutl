#!/usr/bin/php
<?php
/**
 * moOde audio player (C) 2014 Tim Curtis
 * http://moodeaudio.org
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * 2020-05-03 TC moOde 6.5.2
 *
 */

define('VERSION', '1.5.0');
define('SQLDB', '/var/local/www/db/moode-sqlite3.db');

// Features availability bitmask
// NOTE: Updates must also be made to matching code blocks in playerlib.js, sysinfo.sh, moodeutl, and footer.php
// sqlite3 /var/local/www/db/moode-sqlite3.db "select value from cfg_system where param='feat_bitmask'"
// sqlite3 /var/local/www/db/moode-sqlite3.db "UPDATE cfg_system SET value='31679' WHERE param='feat_bitmask'"
const FEAT_KERNEL		= 1;		// y Kernel architecture option on System Config
const FEAT_AIRPLAY		= 2;		// y Airplay renderer
const FEAT_MINIDLNA 	= 4;		// y DLNA server
const FEAT_MPDAS		= 8; 		// y MPD audio scrobbler
const FEAT_SQUEEZELITE	= 16;		// y Squeezelite renderer
const FEAT_UPMPDCLI 	= 32;		// y UPnP client for MPD
const FEAT_SQSHCHK		= 64;		// 	 Require squashfs for software update
const FEAT_GMUSICAPI	= 128;		// y Google Play music service
const FEAT_LOCALUI		= 256;		// y Local display
const FEAT_INPSOURCE	= 512;		// y Input source select
const FEAT_UPNPSYNC 	= 1024;		//   UPnP volume sync
const FEAT_SPOTIFY		= 2048;		// y Spotify Connect renderer
const FEAT_GPIO 		= 4096;		// y GPIO button handler
const FEAT_DJMOUNT		= 8192;		// y UPnP media browser
const FEAT_BLUETOOTH	= 16384;	// y Bluetooth renderer
//						-------
//						  31679

$features = array(
	FEAT_KERNEL => 'Kernel architecture',
	FEAT_AIRPLAY =>	'Airplay renderer',
	FEAT_MINIDLNA => 'DLNA server',
	FEAT_MPDAS => 'MPD audio scrobbler',
	FEAT_SQUEEZELITE => 'Squeezelite renderer',
	FEAT_UPMPDCLI => 'UPnP client for MPD',
	FEAT_SQSHCHK => 'Require squashfs for software update',
	FEAT_GMUSICAPI => 'Google Play music service',
	FEAT_LOCALUI => 'Local display',
	FEAT_INPSOURCE => 'Input source select',
	FEAT_UPNPSYNC => 'UPnP volume sync',
	FEAT_SPOTIFY => 'Spotify Connect renderer',
	FEAT_GPIO => 'GPIO button handler',
	FEAT_DJMOUNT => 'UPnP media browser',
	FEAT_BLUETOOTH => 'Bluetooth renderer'
);

$feat_bitmask = trim(shell_exec("sqlite3 " .  SQLDB . " \"SELECT value FROM cfg_system WHERE param='feat_bitmask'\""));

$option = isset($argv[1]) ? $argv[1] : '';

switch ($option) {
	case '-a':
		print_features($features, $feat_bitmask);
		break;
	case '-A':
		update_features($features, $feat_bitmask, $argv);
		break;
	case '-d':
		dump_session();
		break;
	case '-D':
		delete_session_var($argv);
		break;
	case '-f':
	case '-F':
		audio_formats($option);
		break;
	case '-l':
		moode_log();
		break;
	case '-m':
		system_monitor();
		break;
	case '-q':
		sql_query($argv);
		break;
	case '-r':
		restart_servers();
		break;
	case '-s':
		system_info();
		break;
	case '-t':
		tail_log();
		break;
	case '-u':
		check_station_urls();
		break;
	case '--version':
		echo VERSION . "\n";
		break;
	case '--help':
	default:
		echo
"Usage: moodeutl [OPTION]
Moode utility programs

With no OPTION print the help text and exit.

 -a\t\tprint features availability
 -A [add|rm N] \tupdate features availability
 -d\t\tdump session file (requires sudo)
 -D [var name] \tdelete session variable (requires sudo)
 -f\t\tprint supported audio formats
 -F\t\tprint full alsacap info
 -l\t\tprint moode log
 -m\t\trun system monitor
 -q\t\tquery sql database
 -r\t\trestart servers
 -s\t\tprint system info
 -t\t\tprint last 10 lines of moode log and wait
 -u\t\tcheck radio station urls for playability
 --version\tprint the program version
 --help\t\tprint this help text\n";
		break;
}

function sysCmd($cmd) {
	exec('sudo ' . $cmd . " 2>&1", $output);
	return $output;
}

function print_features($features, $feat_bitmask) {
	foreach ($features as $key => $value) {
		echo $key . "\t" . ($key & $feat_bitmask ? 'y' : '') . "\t" . $value . "\n";
	}
}

function update_features($features, $feat_bitmask, $argv) {
	if (!isset($argv[2])) {
		echo 'Missing 2nd argument [add or rm]' . "\n";
		return;
	}
	if (!($argv[2] == 'add' || $argv[2] == 'rm')) {
		echo '2nd argument must be add or rm' . "\n";
		return;
	}
	if (!isset($argv[3])) {
		echo "Missing 3rd argument [N], the feature's numeric value" . "\n";
		return;
	}

	$match = false;
	foreach ($features as $key => $value) {
		if ($argv[3] == $key) {
			$match = true;
			break;
		}
	}

	$bitmask = (int)$feat_bitmask;
	$arg3 = (int)$argv[3];

	if ($match == false) {
		echo '3rd argument N does equal any feature value' . "\n";
		return;
	}
	elseif ($argv[2] == 'add' && ($arg3 & $bitmask)) {
		echo 'Feature is already enabled, cannot add' . "\n";
		return;
	}
	elseif ($argv[2] == 'rm' && !($arg3 & $bitmask)) {
		echo 'Feature is not already enabled, cannot remove' . "\n";
		return;
	}
	else {
		$new_bitmask = $argv[2] == 'add' ? $bitmask + $arg3 : $bitmask - $arg3;
		shell_exec("sqlite3 " .  SQLDB . " \"UPDATE cfg_system set value='" . $new_bitmask . "' WHERE param='feat_bitmask'\"");
		echo 'Old bitmask ' . $feat_bitmask . "\n";
		echo 'New bitmask ' . $new_bitmask . "\n";
	}
}

function dump_session() {
	if (posix_getuid() != 0){
		echo "This option requires sudo\n";
		return;
	}

	$session_id = trim(shell_exec("sqlite3 " . SQLDB . " \"SELECT value FROM cfg_system WHERE param='sessionid'\""));
	session_id($session_id);
	session_start();
	foreach ($_SESSION as $key => $value) {
		// Radio stations
		if (substr($key, 0, 5) == 'http:' || substr($key, 0, 6) == 'https:' || $key == 'zx reserved 499') {
			echo $key . ', ' . $value['name'] . "\n";
		}
		// Cfg_system, etc
		else {
			echo $key . ', ' . (is_array($value) ? 'Array' : $value) . "\n";
		}
	}
	session_write_close();
}

function delete_session_var($argv) {
	if (posix_getuid() != 0){
		echo "This option requires sudo\n";
		return;
	}

	if (!isset($argv[2])) {
		echo 'Missing 2nd argument [variable name]' . "\n";
		return;
	}

	$session_id = trim(shell_exec("sqlite3 " . SQLDB . " \"SELECT value FROM cfg_system WHERE param='sessionid'\""));
	session_id($session_id);
	session_start();
	unset($_SESSION[$argv[2]]);
	session_write_close();
}

function audio_formats($option) {
	$card_num = trim(shell_exec("sqlite3 " . SQLDB . " \"SELECT value FROM cfg_mpd WHERE param='device'\""));
	$audio_output = trim(shell_exec('cat /proc/asound/card0/pcm0p/sub0/hw_params | grep closed'));

	if ($audio_output == 'closed') {
		// Just formats for the configured device
		if ($option == '-f') {
			$result = shell_exec('alsacap -C ' . $card_num . ' -D 0 2>&1 | grep "Sample formats:"');
			if (!empty($result)) {
				echo explode(': ', $result)[1];
			}
			else {
				echo "Unable to detect formats\n";
			}
		}
		// Full info
		else {
			$result = shell_exec('alsacap 2>&1');
			echo $result;
		}
	}
	else {
		echo "Audio device busy\n" ;
	}
}

function moode_log() {
	echo shell_exec('cat /var/log/moode.log');
}

function system_monitor() {
	echo "Gathering data...\r";
	while(true) {
		// Frequency
		$cpu_freq = file_get_contents('/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq');
		if ($cpu_freq < 1000000) {
	        $cpu_freq = number_format((int)$cpu_freq / 1000, 0, '.', '');
	        $cpu_freq .= ' MHz';
		}
		else {
	        $cpu_freq = number_format((int)$cpu_freq / 1000000, 1, '.', '');
	        $cpu_freq .= ' GHz';
		}

		// Temp
		$cpu_temp = substr(file_get_contents('/sys/class/thermal/thermal_zone0/temp'), 0, 2);

		// CPU
		$cpu_load = exec("top -bn 2 -d 1.0 | grep 'Cpu(s)' | tail -n 1 | awk '{print 100 - $8}'");
		$cpu_load += exec("top -bn 2 -d 0.75 | grep 'Cpu(s)' | tail -n 1 | awk '{print 100 - $8}'");
		$cpu_load = $cpu_load / 2;
		$cpu_load = number_format($cpu_load,0,'.','');

		// Memory
		$mem_total = exec("grep MemTotal /proc/meminfo | awk '{print $2}'");
		$mem_avail = exec("grep MemAvailable /proc/meminfo | awk '{print $2}'");
		$mem_util = number_format(100 * (1 - ($mem_avail / $mem_total)), 0, '.', '');

		// Disk
		$disk_used = exec("df -h | awk 'FNR==2 {print $5}'");
		$disk_free = exec("df -h | grep /dev/root | awk '{print $4}'");

		// PHP FPM pool count
		$fpm_pool = exec('pgrep -c -f "php-fpm: pool www"');

		echo 'CPU: ' . $cpu_freq . ' | LOAD: ' . $cpu_load . '%' . ' | TEMP: ' . $cpu_temp . "\xB0" . 'C | RAM_USED: ' . $mem_util . '% | DISK_USED: ' . $disk_used . ' | DISK_FREE: ' . $disk_free . ' | FPM_POOL: ' . $fpm_pool . ' workers ' . "\r";
	}
}

function sql_query($argv) {
	echo shell_exec("sqlite3 " . SQLDB . " \"" . $argv[2] . "\"");
}

function restart_servers() {
	exec('sudo killall worker.php');
	exec('sudo killall watchdog.sh');
	exec('sudo rm /run/worker.pid');
	exec('sudo systemctl restart php7.3-fpm');
	exec('sudo systemctl restart nginx');
	exec('sudo systemctl stop mpd');
	exec('sudo /var/www/command/worker.php');
	echo "Servers restarted\n";
}

function system_info() {
	echo "Generating info...\n";
	echo shell_exec('sudo /var/www/command/sysinfo.sh');
}

function tail_log() {
	$file = '/var/log/moode.log';
	$size = filesize($file) - 1024;
	while (true) {
		clearstatcache();
		$current_size = filesize($file);
		if ($size == $current_size) {
			sleep(1);
		    continue;
		}

		$fh = fopen($file, "r");
		fseek($fh, $size);

		while ($d = fgets($fh)) {
			echo $d;
		}
		fclose($fh);
		$size = $current_size;
	}
}

function check_station_urls() {
	error_reporting(E_ERROR | E_PARSE);
	$results = shell_exec("sqlite3 " . SQLDB . " \"SELECT station, name FROM cfg_radio WHERE station!='DELETED'\"");
	$line = strtok($results, "\n");
	$count = 0;
	while ($line) {
		list($url, $name) = explode('|', $line);
		// Skip BBC geo fenced stations and the reserved 499 row
		if (strpos($name, '- 320K') === false && strpos($name, 'zx reserved 499') === false) {
			$tmpfile = file_get_contents($url, FALSE, NULL, 0, 1024);
			$playable = false === $tmpfile ? '?' : 'OK';
			if ($tmpfile == false) {
				echo ++$count . "\t" . '?' . "\t" . $name . ' | ' . $url . "\n";
			}
			else {
				echo ++$count . "\t" . 'OK' . "\t" . $name . "\n";
			}
		}
		$line = strtok("\n");
	}
}
